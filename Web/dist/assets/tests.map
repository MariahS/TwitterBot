{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","web/tests/lint/app.lint-test.js","web/tests/lint/templates.template.lint-test.js","web/tests/lint/tests.lint-test.js","web/tests/test-helper.js","web/tests/unit/adapters/application-test.js","web/tests/unit/models/subreddit-test.js","web/tests/unit/models/tweet-test.js","web/tests/unit/routes/application-test.js","web/tests/unit/routes/index-test.js","web/tests/unit/routes/subreddits/edit-test.js","web/tests/unit/routes/subreddits/list-test.js","web/tests/unit/routes/tweets/timeline-test.js","web/tests/unit/serializers/subreddit-test.js","web/tests/unit/serializers/tweet-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"web/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | app');\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'adapters/application.js should pass ESLint\\n\\n2:8 - \\'Ember\\' is defined but never used. (no-unused-vars)');\n  });\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('models/subreddit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/subreddit.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('models/tweet.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/tweet.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/subreddits/edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/subreddits/edit.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/subreddits/list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/subreddits/list.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/tweets/timeline.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/tweets/timeline.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('serializers/subreddit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'serializers/subreddit.js should pass ESLint\\n\\n7:5 - Unexpected console statement. (no-console)\\n13:7 - Unexpected console statement. (no-console)');\n  });\n  QUnit.test('serializers/tweet.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'serializers/tweet.js should pass ESLint\\n\\n7:5 - Unexpected console statement. (no-console)\\n13:7 - Unexpected console statement. (no-console)');\n  });\n});","define(\"web/tests/lint/templates.template.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('TemplateLint');\n  QUnit.test('web/templates/application.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'web/templates/application.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('web/templates/index.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'web/templates/index.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('web/templates/subreddits/edit.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'web/templates/subreddits/edit.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('web/templates/subreddits/list.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'web/templates/subreddits/list.hbs should pass TemplateLint.\\n\\nweb/templates/subreddits/list.hbs\\n  9:4  error  Incorrect indentation for `<li>` beginning at L9:C4. Expected `<li>` to be at an indentation of 6 but was found at 4.  block-indentation\\n  10:54  error  you must use double quotes in templates  quotes\\n');\n  });\n  QUnit.test('web/templates/tweets/timeline.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'web/templates/tweets/timeline.hbs should pass TemplateLint.\\n\\nweb/templates/tweets/timeline.hbs\\n  11:6  error  Incorrect indentation for `div` beginning at L2:C2. Expected `</div>` ending at L11:C6 to be at an indentation of 2 but was found at 0.  block-indentation\\n  3:0  error  Incorrect indentation for `{{#each}}` beginning at L3:C0. Expected `{{#each}}` to be at an indentation of 4 but was found at 0.  block-indentation\\n  5:13  error  Unnecessary string concatenation. Use {{tweet.url}} instead of \"{{tweet.url}}\".  no-unnecessary-concat\\n');\n  });\n});","define(\"web/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | tests');\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/adapters/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/models/subreddit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/subreddit-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/models/tweet-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/tweet-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/subreddits/edit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/subreddits/edit-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/subreddits/list-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/subreddits/list-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/tweets/timeline-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/tweets/timeline-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/serializers/subreddit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/subreddit-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/serializers/tweet-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/tweet-test.js should pass ESLint\\n\\n');\n  });\n});","define(\"web/tests/test-helper\", [\"web/app\", \"web/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"web/tests/unit/adapters/application-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Adapter | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let adapter = this.owner.lookup('adapter:application');\n      assert.ok(adapter);\n    });\n  });\n});","define(\"web/tests/unit/models/subreddit-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | subreddit', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = store.createRecord('subreddit', {});\n      assert.ok(model);\n    });\n  });\n});","define(\"web/tests/unit/models/tweet-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | tweet', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = store.createRecord('tweet', {});\n      assert.ok(model);\n    });\n  });\n});","define(\"web/tests/unit/routes/application-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:application');\n      assert.ok(route);\n    });\n  });\n});","define(\"web/tests/unit/routes/index-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:index');\n      assert.ok(route);\n    });\n  });\n});","define(\"web/tests/unit/routes/subreddits/edit-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | subreddits/edit', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:subreddits/edit');\n      assert.ok(route);\n    });\n  });\n});","define(\"web/tests/unit/routes/subreddits/list-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | subreddits/list', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:subreddits/list');\n      assert.ok(route);\n    });\n  });\n});","define(\"web/tests/unit/routes/tweets/timeline-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | tweets/timeline', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:tweets/timeline');\n      assert.ok(route);\n    });\n  });\n});","define(\"web/tests/unit/serializers/subreddit-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Serializer | subreddit', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let serializer = store.serializerFor('subreddit');\n      assert.ok(serializer);\n    });\n    (0, _qunit.test)('it serializes records', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let record = store.createRecord('subreddit', {});\n      let serializedRecord = record.serialize();\n      assert.ok(serializedRecord);\n    });\n  });\n});","define(\"web/tests/unit/serializers/tweet-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Serializer | tweet', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let serializer = store.serializerFor('tweet');\n      assert.ok(serializer);\n    });\n    (0, _qunit.test)('it serializes records', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let record = store.createRecord('tweet', {});\n      let serializedRecord = record.serialize();\n      assert.ok(serializedRecord);\n    });\n  });\n});","define('web/config/environment', [], function() {\n  var prefix = 'web';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('web/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}